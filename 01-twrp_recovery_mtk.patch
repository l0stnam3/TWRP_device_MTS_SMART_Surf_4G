diff --git a/data.cpp b/data.cpp
index 20b6089..eef7a87 100644
--- a/data.cpp
+++ b/data.cpp
@@ -530,9 +530,9 @@ void DataManager::SetDefaultValues()
 	mConst.SetValue("false", "0");
 
 	mConst.SetValue(TW_VERSION_VAR, TW_VERSION_STR);
-	mPersist.SetValue("tw_button_vibrate", "80");
+	mPersist.SetValue("tw_button_vibrate", "40");
 	mPersist.SetValue("tw_keyboard_vibrate", "40");
-	mPersist.SetValue("tw_action_vibrate", "160");
+	mPersist.SetValue("tw_action_vibrate", "240");
 
 	TWPartition *store = PartitionManager.Get_Default_Storage_Partition();
 	if (store)
@@ -682,15 +682,15 @@ void DataManager::SetDefaultValues()
 	mPersist.SetValue(TW_FORCE_MD5_CHECK_VAR, "0");
 	mPersist.SetValue(TW_DISABLE_FREE_SPACE_VAR, "0");
 	mPersist.SetValue(TW_USE_COMPRESSION_VAR, "0");
-	mPersist.SetValue(TW_TIME_ZONE_VAR, "CST6CDT,M3.2.0,M11.1.0");
-	mPersist.SetValue(TW_GUI_SORT_ORDER, "1");
-	mPersist.SetValue(TW_RM_RF_VAR, "0");
+	mPersist.SetValue(TW_TIME_ZONE_VAR, "SAUST-3");
+	mPersist.SetValue(TW_GUI_SORT_ORDER, "0");
+	mPersist.SetValue(TW_RM_RF_VAR, "1");
 	mPersist.SetValue(TW_SKIP_MD5_CHECK_VAR, "0");
-	mPersist.SetValue(TW_SKIP_MD5_GENERATE_VAR, "0");
+	mPersist.SetValue(TW_SKIP_MD5_GENERATE_VAR, "1");
 	mPersist.SetValue(TW_SDEXT_SIZE, "0");
 	mPersist.SetValue(TW_SWAP_SIZE, "0");
 	mPersist.SetValue(TW_SDPART_FILE_SYSTEM, "ext3");
-	mPersist.SetValue(TW_TIME_ZONE_GUISEL, "CST6;CDT,M3.2.0,M11.1.0");
+	mPersist.SetValue(TW_TIME_ZONE_GUISEL, "SAUST-3;SAUDT");
 	mPersist.SetValue(TW_TIME_ZONE_GUIOFFSET, "0");
 	mPersist.SetValue(TW_TIME_ZONE_GUIDST, "1");
 	mData.SetValue(TW_ACTION_BUSY, "0");
@@ -707,7 +707,7 @@ void DataManager::SetDefaultValues()
 	mData.SetValue("tw_terminal_state", "0");
 	mData.SetValue("tw_background_thread_running", "0");
 	mData.SetValue(TW_RESTORE_FILE_DATE, "0");
-	mPersist.SetValue("tw_military_time", "0");
+	mPersist.SetValue("tw_military_time", "1");
 #ifdef TW_NO_SCREEN_TIMEOUT
 	mConst.SetValue("tw_screen_timeout_secs", "0");
 	mConst.SetValue("tw_no_screen_timeout", "1");
@@ -769,7 +769,7 @@ void DataManager::SetDefaultValues()
 #endif
 		mConst.SetValue("tw_brightness_max", maxBrightness);
 		mPersist.SetValue("tw_brightness", maxBrightness);
-		mPersist.SetValue("tw_brightness_pct", "100");
+		mPersist.SetValue("tw_brightness_pct", "70");
 #ifdef TW_SECONDARY_BRIGHTNESS_PATH
 		string secondfindbright = EXPAND(TW_SECONDARY_BRIGHTNESS_PATH);
 		if (secondfindbright != "" && TWFunc::Path_Exists(secondfindbright)) {
@@ -831,8 +831,8 @@ void DataManager::SetDefaultValues()
 	mConst.SetValue("tw_oem_build", "1");
 #else
 	mConst.SetValue("tw_oem_build", "0");
-	mPersist.SetValue("tw_app_prompt", "1");
-	mPersist.SetValue("tw_app_install_system", "1");
+	mPersist.SetValue("tw_app_prompt", "0");
+	mPersist.SetValue("tw_app_install_system", "0");
 	mData.SetValue("tw_app_install_status", "0"); // 0 = no status, 1 = not installed, 2 = already installed
 #endif
 
diff --git a/twrp-functions.cpp b/twrp-functions.cpp
index 3c6c55b..638a2dc 100644
--- a/twrp-functions.cpp
+++ b/twrp-functions.cpp
@@ -45,14 +45,17 @@
 #include "variables.h"
 #include "bootloader.h"
 #include "cutils/properties.h"
+#ifdef ANDROID_RB_POWEROFF
 #include "cutils/android_reboot.h"
-#include <sys/reboot.h>
+#endif
 #endif // ndef BUILD_TWRPTAR_MAIN
 #ifndef TW_EXCLUDE_ENCRYPTED_BACKUPS
 	#include "openaes/inc/oaes_lib.h"
 #endif
 #include "set_metadata.h"
 
+#include "cutils/android_reboot.h"
+
 extern "C" {
 	#include "libcrecovery/common.h"
 }
@@ -547,46 +550,47 @@ int TWFunc::tw_reboot(RebootCommand command)
 	switch (command) {
 		case rb_current:
 		case rb_system:
+			Update_Log_File();
 			Update_Intent_File("s");
 			sync();
 			check_and_run_script("/sbin/rebootsystem.sh", "reboot system");
-#ifdef ANDROID_RB_PROPERTY
-			return property_set(ANDROID_RB_PROPERTY, "reboot,");
-#elif defined(ANDROID_RB_RESTART)
-			return android_reboot(ANDROID_RB_RESTART, 0, 0);
-#else
+
 			return reboot(RB_AUTOBOOT);
-#endif
+
 		case rb_recovery:
 			check_and_run_script("/sbin/rebootrecovery.sh", "reboot recovery");
 #ifdef ANDROID_RB_PROPERTY
-			return property_set(ANDROID_RB_PROPERTY, "reboot,recovery");
+			property_set(ANDROID_RB_PROPERTY, "reboot,recovery");
 #else
 			return __reboot(LINUX_REBOOT_MAGIC1, LINUX_REBOOT_MAGIC2, LINUX_REBOOT_CMD_RESTART2, (void*) "recovery");
 #endif
+			sleep(5);
+			return 0;
 		case rb_bootloader:
 			check_and_run_script("/sbin/rebootbootloader.sh", "reboot bootloader");
 #ifdef ANDROID_RB_PROPERTY
-			return property_set(ANDROID_RB_PROPERTY, "reboot,bootloader");
+			property_set(ANDROID_RB_PROPERTY, "reboot,bootloader");
 #else
 			return __reboot(LINUX_REBOOT_MAGIC1, LINUX_REBOOT_MAGIC2, LINUX_REBOOT_CMD_RESTART2, (void*) "bootloader");
 #endif
+			sleep(5);
+			return 0;
 		case rb_poweroff:
 			check_and_run_script("/sbin/poweroff.sh", "power off");
-#ifdef ANDROID_RB_PROPERTY
-			return property_set(ANDROID_RB_PROPERTY, "shutdown,");
-#elif defined(ANDROID_RB_POWEROFF)
-			return android_reboot(ANDROID_RB_POWEROFF, 0, 0);
-#else
-			return reboot(RB_POWER_OFF);
+#ifdef ANDROID_RB_POWEROFF
+			android_reboot(ANDROID_RB_POWEROFF, 0, 0);
 #endif
+			return reboot(RB_POWER_OFF);
+
 		case rb_download:
 			check_and_run_script("/sbin/rebootdownload.sh", "reboot download");
 #ifdef ANDROID_RB_PROPERTY
-			return property_set(ANDROID_RB_PROPERTY, "reboot,download");
+			property_set(ANDROID_RB_PROPERTY, "reboot,download");
 #else
 			return __reboot(LINUX_REBOOT_MAGIC1, LINUX_REBOOT_MAGIC2, LINUX_REBOOT_CMD_RESTART2, (void*) "download");
 #endif
+			sleep(5);
+			return 0;
 		default:
 			return -1;
 	}
diff --git a/twrp.cpp b/twrp.cpp
index 88df452..bc7966a 100644
--- a/twrp.cpp
+++ b/twrp.cpp
@@ -402,5 +402,10 @@ int main(int argc, char **argv) {
 	else
 		TWFunc::tw_reboot(rb_system);
 
+#ifdef ANDROID_RB_RESTART
+	android_reboot(ANDROID_RB_RESTART, 0, 0);
+#else
+	reboot(RB_AUTOBOOT);
+#endif
 	return 0;
 }
